use crate::{lexer, ast};
use lalrpop_util::ErrorRecovery;
use codespan::{FileId, Span};

grammar<'err>(file_id: FileId, errors: &'err mut Vec<ErrorRecovery<u32, lexer::Tok, lexer::LexError>>);

extern {
    type Location = u32;
    type Error = lexer::LexError;

    enum lexer::Tok {
        "identifier" => lexer::Tok::Identifier(<String>),
        "string" => lexer::Tok::String(<String>),
        "number" => lexer::Tok::Number(<usize>),
        "type" => lexer::Tok::Type,
        "=" => lexer::Tok::Equals,
        "==" => lexer::Tok::DoubleEquals,
        "let" => lexer::Tok::Let,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Asterisk,
        "/" => lexer::Tok::Slash,
        "{" => lexer::Tok::LBrace,
        "}" => lexer::Tok::RBrace,
        "(" => lexer::Tok::LParen,
        ")" => lexer::Tok::RParen,
        "[" => lexer::Tok::LBracket,
        "]" => lexer::Tok::RBracket,
        ":" => lexer::Tok::Colon,
        "::" => lexer::Tok::DoubleColon,
        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "->" => lexer::Tok::ThinArrow,
        "=>" => lexer::Tok::ThickArrow,
        "fn" => lexer::Tok::Fn,
        "!" => lexer::Tok::Not,
        "!=" => lexer::Tok::NotEquals,
        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
        "&&" => lexer::Tok::And,
        "|" => lexer::Tok::Pipe,
        "||" => lexer::Tok::Or,
        ">" => lexer::Tok::Gt,
        ">=" => lexer::Tok::Ge,
        "<" => lexer::Tok::Lt,
        "<=" => lexer::Tok::Lt,
        "_" => lexer::Tok::Underscore,
        "." => lexer::Tok::Period,
        ".." => lexer::Tok::DoublePeriod,
        "mut" => lexer::Tok::Mut,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "%" => lexer::Tok::Percent,
        "%{" => lexer::Tok::PercentLBrace,
        "for" => lexer::Tok::For,
        "in" => lexer::Tok::In,
        "while" => lexer::Tok::While,
        "break" => lexer::Tok::Break,
        "continue" => lexer::Tok::Continue,
    }
}

Spanned<T>: ast::Spanned<T> = {
    <l:@L> <t:T> <r:@R> => ast::Spanned::new(t, ast::FileSpan::new(file_id, Span::new(l, r)))
};

Identifier: String = "identifier";

EnumParams: Vec<ast::Spanned<ast::Type>> = {
    "(" <args: (<Ty> ",")*> <last:Ty> (","?) ")" => {
        let mut args = args;
        args.push(last);
        args
    },
};

EnumCase: ast::EnumCase = {
    <id:Spanned<"identifier">> <params:EnumParams?> => ast::EnumCase {
        id,
        params: if let Some(params) = params { params } else { vec![] }
    }
};

Ty: ast::Spanned<ast::Type> = {
    Spanned<"identifier"> => {
        let span = <>.span;
        <>.map(|id| ast::Type::Type(ast::Spanned::new(id, span)))
    },
    <l:@L> "[" <ty:Ty> ";" <len:Spanned<"number">> "]" <r:@R> =>
        ast::Spanned::new(ast::Type::Array(Box::new(ty), len), ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" ")" <r:@R> => ast::Spanned::new(ast::Type::Unit, ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" <param_types:(<Ty> ",")*> ")" "->" <return_type:Ty> <r:@R> =>
        ast::Spanned::new(ast::Type::Fn(param_types, Box::new(return_type)), ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" <param_types:(<Ty> ",")*> <last_param_type:Ty> ")" "->" <return_type:Ty> <r:@R> => {
        let mut param_types = param_types;
        param_types.push(last_param_type);
        ast::Spanned::new(ast::Type::Fn(param_types, Box::new(return_type)), ast::FileSpan::new(file_id, Span::new(l, r)))
    }
};

TypeDeclType: ast::Spanned<ast::TypeDeclType> = {
    <l:@L> <cases: (<Spanned<EnumCase>> "|")*> <last:Spanned<EnumCase>> <r:@R> => {
        if cases.is_empty() {
            if last.t.params.is_empty() {
                ast::Spanned::new(ast::TypeDeclType::Type(last.t.id), ast::FileSpan::new(file_id, Span::new(l, r)))
            } else {
                ast::Spanned::new(ast::TypeDeclType::Enum(vec![last]), ast::FileSpan::new(file_id, Span::new(l, r)))
            }
        } else {
            let mut cases = cases;
            cases.push(last);
            ast::Spanned::new(ast::TypeDeclType::Enum(cases), ast::FileSpan::new(file_id, Span::new(l, r)))
        }
    },
    <l:@L> "{" <ty_fields:(<Spanned<TyField>> ",")*> "}" <r:@R> =>
        ast::Spanned::new(ast::TypeDeclType::Record(ty_fields), ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "{" <ty_fields:(<Spanned<TyField>> ",")*> <last:Spanned<TyField>> "}" <r:@R> => {
        let mut ty_fields = ty_fields;
        ty_fields.push(last);
        ast::Spanned::new(ast::TypeDeclType::Record(ty_fields), ast::FileSpan::new(file_id, Span::new(l, r)))
    },
    <l:@L> "[" <ty:Ty> ";" <len:Spanned<"number">> "]" <r:@R> =>
        ast::Spanned::new(ast::TypeDeclType::Array(ty, len), ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" ")" <r:@R> => ast::Spanned::new(ast::TypeDeclType::Unit, ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" <param_types:(<Ty> ",")*> ")" "->" <return_type:Ty> <r:@R> =>
        ast::Spanned::new(ast::TypeDeclType::Fn(param_types, return_type), ast::FileSpan::new(file_id, Span::new(l, r))),
    <l:@L> "(" <param_types:(<Ty> ",")*> <last_param_type:Ty> ")" "->" <return_type:Ty> <r:@R> => {
        let mut param_types = param_types;
        param_types.push(last_param_type);
        ast::Spanned::new(ast::TypeDeclType::Fn(param_types, return_type), ast::FileSpan::new(file_id, Span::new(l, r)))
    }
};

TyField: ast::TypeField = {
    <id:Spanned<"identifier">> ":" <ty:Ty> => ast::TypeField { id, ty }
};

TypeDecl: ast::TypeDecl =
    "type" <id:Spanned<"identifier">> "=" <ty:TypeDeclType> =>
        ast::TypeDecl { id, ty };

_Let: ast::Let = {
   "let" <ml:@L> <mr:@R> <pattern:Spanned<"_">> <ty:(":" <Ty>)?> "=" <expr:Expr> => ast::Let {
        pattern: pattern.map(|_| ast::Pattern::Wildcard),
        immutable: ast::Spanned::new(true, ast::FileSpan::new(file_id, Span::new(ml, mr))),
        ty,
        expr,
    },
   "let" <ml:@L> <mutable:"mut"?> <mr:@R> <id:Spanned<"identifier">> <ty:(":" <Ty>)?> "=" <expr:Expr> => ast::Let {
        pattern: id.map(ast::Pattern::String),
        immutable: ast::Spanned::new(mutable.is_none(), ast::FileSpan::new(file_id, Span::new(ml, mr))),
        ty,
        expr,
    },
};

Assign = Spanned<_Assign>;

_Assign: ast::Assign = {
   <lval:LVal> "=" <expr:Expr> => ast::Assign { <> },
};

FnDecl: ast::FnDecl = {
    "fn" <id:Spanned<"identifier">> "(" <type_fields:(<Spanned<TyField>> ",")*> ")"
        <return_type:("->" <Ty>)?> "=" <body:Expr> ";" => {
        ast::FnDecl { id, type_fields, return_type, body }
    },
    "fn" <id:Spanned<"identifier">> "(" <type_fields:(<Spanned<TyField>> ",")*> <last:Spanned<TyField>> ")"
        <return_type:("->" <Ty>)?> "=" <body:Expr> ";" => {
        let mut type_fields = type_fields;
        type_fields.push(last);
        ast::FnDecl { id, type_fields, return_type, body }
    }
};

FnDeclExpr = Spanned<_FnDeclExpr>;

_FnDeclExpr: ast::FnDecl = {
    "fn" <id:Spanned<"identifier">> "(" <type_fields:(<Spanned<TyField>> ",")*> ")"
        <return_type:("->" <Ty>)?> "=" <body:Expr> => {
        ast::FnDecl { id, type_fields, return_type, body }
    },
    "fn" <id:Spanned<"identifier">> "(" <type_fields:(<Spanned<TyField>> ",")*> <last:Spanned<TyField>> ")"
        <return_type:("->" <Ty>)?> "=" <body:Expr> => {
        let mut type_fields = type_fields;
        type_fields.push(last);
        ast::FnDecl { id, type_fields, return_type, body }
    }
};

Decl: ast::Decl = Spanned<DeclType>;

DeclType: ast::DeclType = {
    <Spanned<TypeDecl>> ";" => ast::DeclType::Type(<>),
    <Spanned<FnDecl>> => ast::DeclType::Fn(<>),
    ! => {
        errors.push(<>);
        ast::DeclType::Error
    },
};

pub Expr: ast::Expr = {
    Spanned<Closure> => <>.map(|e| ast::ExprType::Closure(Box::new(e))),
    Spanned<FnDeclExpr> => <>.map(|e| ast::ExprType::FnDecl(Box::new(e))),
    ExprTypeOrLetOrAssign,
};

ExprTypeOrLetOrAssign: ast::Expr = {
    CompareExpr,
    Spanned<_Let> => {
        let span = <>.span;
        <>.map(|l| ast::ExprType::Let(Box::new(ast::Spanned::new(l, span))))
    },
    <l:@L> <expr:Assign> <r:@R> => ast::Expr::new(ast::ExprType::Assign(Box::new(expr)), ast::FileSpan::new(file_id, Span::new(l, r))),
}

CompareExpr: ast::Expr = {
    <l:CompareExpr> <op: Spanned<"==">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Eq);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    <l:CompareExpr> <op: Spanned<"!=">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Ne);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    <l:CompareExpr> <op: Spanned<">">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Gt);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    <l:CompareExpr> <op: Spanned<">=">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Ge);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    <l:CompareExpr> <op: Spanned<"<">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Lt);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    <l:CompareExpr> <op: Spanned<"<=">> <r:RangeExpr> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::CompareOp::Le);
        ast::Expr::new(ast::ExprType::Compare(Box::new(ast::Spanned::new(ast::Compare { l, op, r }, span))),
            span)
    },
    RangeExpr,
};

RangeExpr: ast::Expr = {
    <l:OpExpr> ".." <r:OpExpr> => {
        let span = l.span.merge(r.span);
        ast::Expr::new(ast::ExprType::Range(Box::new(ast::Spanned::new(
            ast::Range {
                start: l,
                end: r
            },
            span))),
        span)
    },
    OpExpr,
};

OpExpr: ast::Expr = {
    <l:OpExpr> <op: Spanned<"+">> <r:Factor> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::ArithOp::Add);
        ast::Expr::new(ast::ExprType::Arith(Box::new(ast::Spanned::new(ast::Arith { l, op, r }, span))),
            span)
    },
    <l:OpExpr> <op: Spanned<"-">> <r:Factor> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::ArithOp::Sub);
        ast::Expr::new(ast::ExprType::Arith(Box::new(ast::Spanned::new(ast::Arith { l, op, r }, span))),
            span)
    },
    <l:OpExpr> <op: Spanned<"||">> <r:Factor> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::BoolOp::Or);
        ast::Expr::new(ast::ExprType::Bool(Box::new(ast::Spanned::new(ast::Bool { l, op, r }, span))),
            span)
    },
    Factor,
};

ExprTypeSeq: ast::ExprType = {
    "{" <l:@L> <r:@R> "}" => ast::ExprType::Seq(vec![ast::Expr::new(ast::ExprType::Unit, ast::FileSpan::new(file_id, Span::new(l, r)))], true),
    "{" <exprs:(<Expr> ";")*> <last:Expr> <last_semi:";"?> "}" => {
        let mut exprs = exprs;
        exprs.push(last);
        ast::ExprType::Seq(exprs, last_semi.is_none())
    }
};

Factor: ast::Expr = {
    <l:Factor> <op: Spanned<"*">> <r:TermOrNeg> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::ArithOp::Mul);
        ast::Expr::new(ast::ExprType::Arith(Box::new(ast::Spanned::new(ast::Arith { l, op, r }, span))),
            span)
    },
    <l:Factor> <op: Spanned<"/">> <r:TermOrNeg> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::ArithOp::Div);
        ast::Expr::new(ast::ExprType::Arith(Box::new(ast::Spanned::new(ast::Arith { l, op, r }, span))),
            span)
    },
    <l:Factor> <op: Spanned<"%">> <r:TermOrNeg> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::ArithOp::Mod);
        ast::Expr::new(ast::ExprType::Arith(Box::new(ast::Spanned::new(ast::Arith { l, op, r }, span))),
            span)
    },
    <l:Factor> <op: Spanned<"&&">> <r:TermOrNeg> => {
        let span = l.span.merge(r.span);
        let op = op.map(|_| ast::BoolOp::And);
        ast::Expr::new(ast::ExprType::Bool(Box::new(ast::Spanned::new(ast::Bool { l, op, r }, span))),
            span)
    },
    TermOrNeg,
};

TermOrNeg: ast::Expr = {
    Term,
    <l:@L> "-" <term:Term> => {
        let rspan = term.span;
        ast::Expr::new(ast::ExprType::Neg(Box::new(term)), ast::FileSpan::new(file_id, Span::new(l, rspan.end())))
    },
    <l:@L> "!" <term:Term> => {
        let rspan = term.span;
        ast::Expr::new(ast::ExprType::Not(Box::new(term)), ast::FileSpan::new(file_id, Span::new(l, rspan.end())))
    },
};

Term: ast::Expr = {
    Spanned<"number"> => <>.map(ast::ExprType::Number),
    Spanned<"string"> => <>.map(ast::ExprType::String),
    Spanned<"true"> => <>.map(|_| ast::ExprType::BoolLiteral(true)),
    Spanned<"false"> => <>.map(|_| ast::ExprType::BoolLiteral(false)),
    Spanned<"continue"> => <>.map(|_| ast::ExprType::Continue),
    Spanned<"break"> => <>.map(|_| ast::ExprType::Break),
    Spanned<("(" <Expr> ")")> => <>.map(|s| s.t),
    Spanned<("(" ")")> => <>.map(|s| ast::ExprType::Unit),
    Spanned<LVal> => <>.map(|e| ast::ExprType::LVal(Box::new(e))),
    Spanned<FnCall> => <>.map(|e| ast::ExprType::FnCall(Box::new(e))),
    Spanned<Array> => <>.map(|e| ast::ExprType::Array(Box::new(e))),
    Spanned<Record> => <>.map(|e| ast::ExprType::Record(Box::new(e))),
    Spanned<If> => <>.map(|e| ast::ExprType::If(Box::new(e))),
    Spanned<For> => <>.map(|e| ast::ExprType::For(Box::new(e))),
    Spanned<While> => <>.map(|e| ast::ExprType::While(Box::new(e))),
    Spanned<ExprTypeSeq>,
    Spanned<Enum> => <>.map(|e| ast::ExprType::Enum(Box::new(e))),
};

LVal = Spanned<_LVal>;

_LVal: ast::LVal = {
    <"identifier"> => ast::LVal::Simple(<>),
    <val:LVal> "." <field:Spanned<"identifier">> => ast::LVal::Field(Box::new(val), field),
    <val:LVal> "[" <subscript:Expr> "]" => ast::LVal::Subscript(Box::new(val), subscript),
};

FnCall = Spanned<_FnCall>;

_FnCall: ast::FnCall = {
    <id:Spanned<"identifier">> "(" <args:(<Expr> ",")*> ")" => ast::FnCall { id, args },
    <id:Spanned<"identifier">> "(" <args:(<Expr> ",")*> <last:Expr> ")" => {
        let mut args = args;
        args.push(last);
        ast::FnCall { id, args }
    }
};

Record = Spanned<_Record>;

_Record: ast::Record = {
    <id:Spanned<"identifier">> "%{" <field_assigns:(<Spanned<FieldAssign>> ",")*> "}" => ast::Record { <> },
    <id:Spanned<"identifier">> "%{" <field_assigns:(<Spanned<FieldAssign>> ",")*> <last:Spanned<FieldAssign>> "}" => {
        let mut field_assigns = field_assigns;
        field_assigns.push(last);
        ast::Record {
            id,
            field_assigns,
        }
    }
};

FieldAssign: ast::FieldAssign = {
    <id:Spanned<"identifier">> ":" <expr:Expr> => ast::FieldAssign { <> }
};

Array = Spanned<_Array>;

_Array: ast::Array = {
    "[" <initial_value:Expr> ";" <len:Expr> "]" => ast::Array { <> }
};

If = Spanned<_If>;

_If: ast::If = {
    "if" <cond:Expr> <then_expr:Spanned<ExprTypeSeq>> => ast::If {
        cond,
        then_expr,
        else_expr: None,
    },
    "if" <cond:Expr> <then_expr:Spanned<ExprTypeSeq>> "else" <else_expr:Spanned<ExprTypeSeq>> =>
        ast::If { cond, then_expr, else_expr: Some(else_expr) },
    "if" <cond:Expr> <then_expr:Spanned<ExprTypeSeq>> "else" <else_if:Spanned<If>> => ast::If {
        cond,
        then_expr,
        else_expr: Some(else_if.map(|expr| ast::ExprType::If(Box::new(expr)))),
    },
};

For = Spanned<_For>;

_For: ast::For = {
    "for" <index:Spanned<"identifier">> "in" <range:Expr> <body:Spanned<ExprTypeSeq>> =>
        ast::For { index, range, body }
};

While = Spanned<_While>;

_While: ast::While = {
    "while" <cond:Expr> <body:Spanned<ExprTypeSeq>> => ast::While { cond, body }
};

Enum = Spanned<_Enum>;

_Enum: ast::Enum = {
    <enum_id:Spanned<"identifier">> "::" <case_id:Spanned<"identifier">> <args:Spanned<EnumArgs?>> => {
        ast::Enum {
            enum_id,
            case_id,
            args: args.map(|args| args.unwrap_or(vec![])),
        }
    }
};

EnumArgs: Vec<ast::Expr> = {
    "(" <exprs:(<Expr> ",")*> <last_expr:Expr> (","?) ")" => {
        let mut exprs = exprs;
        exprs.push(last_expr);
        exprs
    },
};

Closure = Spanned<_Closure>;

_Closure: ast::Closure = {
    "||" <body:ExprTypeOrLetOrAssign> => ast::Closure {
        type_fields: vec![],
        body,
    },
    "|" <type_fields:(<Spanned<TyField>> ",")+> "|" <body:ExprTypeOrLetOrAssign> => ast::Closure {
        type_fields,
        body,
    },
    "|" <type_fields:(<Spanned<TyField>> ",")*> <last_type_field:Spanned<TyField>> "|" <body:ExprTypeOrLetOrAssign> => {
        let mut type_fields = type_fields;
        type_fields.push(last_type_field);
        ast::Closure {
            type_fields,
            body,
        }
    },
};

pub Program: Vec<ast::Decl> = <Decl*>;
